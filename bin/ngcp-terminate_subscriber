#!/usr/bin/perl
use strict;
use warnings;
use English;
use Getopt::Long;
use Pod::Usage;
use NGCP::API::Client;
use Readonly;

Readonly my @required => qw(username domain);

my $opts = {
    verbose => 0,
};

GetOptions( $opts,
    "help|h" => \&usage,
    "username=s",
    "domain=s",
    "verbose",
) or usage();

sub check_params {
    my @missing;
    foreach my $param (@required) {
        push @missing, $param unless $opts->{$param};
    }
    usage(join(' ', @missing)) if scalar @missing;
    return;
}

sub usage {
    my $msg = shift;
    pod2usage(-exitval => $msg ? 1 : 0,
              -verbose => 99,
              -sections => [ qw(NAME OPTIONS USAGE) ],
              -message => $msg
                            ? $msg =~ /not found/i
                                ? $msg
                                : "Missing parameters: $msg"
                            : '',
             );
    return;
}

sub main {
    check_params();
    my $uri = sprintf '/api/subscribers/?username=%s&domain=%s',
              @{$opts}{qw(username domain)};
    my $client = new NGCP::API::Client;
    $client->set_verbose($opts->{verbose});
    my $sub = $client->request("GET", $uri);
    my $sub_id;
    if ($sub->as_hash->{total_count} == 1) {
        my $tmp = $sub->as_hash->{_embedded}->{'ngcp:subscribers'};
        if (ref $tmp eq 'ARRAY') {
            $sub_id = $tmp[0]->{id};
        } else {
            $sub_id = $tmp->{id};
        }
        usage("Wrong subscriber id found") unless $sub_id =~ /^\d$/;
    } else {
        usage("Subscriber not found");
    }
    $uri = '/api/subscribers/'.$sub_id;
    my $data = [ { op => 'replace',
                   path => '/status',
                   value => 'terminated' } ];
    my $res = $client->request("PATCH", $uri, $data);
    print $res->result."\n";

    exit !$res->is_success;

    return;
}

main();

exit 0;

__END__

=head1 NAME

ngcp-terminate_subscriber - terminate an NGCP Subscriber

=head1 OPTIONS

=over 8

=item B<-help>

Print a brief help message

=item B<-username>

Subscriber username

=item B<-domain>

Subscriber domain

=item B<-verbose>

Show additional debug information. Default false.

=back

=head1 USAGE

ngcp-terminate_subscriber [options]

ngcp-terminate_subscriber --username 431110001 --domain example.org

=head1 DESCRIPTION

B<This program> terminates a subscriber on the NGCP platform.

=head1 REQUIRED ARGUMENTS

=over 8

=item B<-username>

=item B<-domain>

=back

=head1 EXIT STATUS

Exit code 0 means everything is ok otherwise 1.

=head1 CONFIGURATION

=head1 DIAGNOSTICS

=head1 SEE ALSO

NGCP::API::Client

=head1 DEPENDENCIES

ngcp-terminate_subscriber relies on a bunch of Perl modules, all of them specified as
dependencies through the Debian package.

=head1 INCOMPATIBILITIES

No known at this time.

=head1 BUGS AND LIMITATIONS

Please report problems you notice to the Sipwise
Development Team <support@sipwise.com>.

=head1 AUTHOR

Victor Seva <vseva@sipwise.com>

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2016 Sipwise GmbH, Austria

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
