#!/usr/bin/perl
use strict;
use warnings;
use Config::Tiny;
use English;
use Getopt::Long;
use JSON qw();
use LWP::UserAgent;
use Pod::Usage;
use URI;
use IO::Socket::SSL;

my $config =  Config::Tiny->read('/etc/default/ngcp-api');
my $opts = {
    reseller_id => 1,
    host => '127.0.0.1',
    port => 1443,
    auth_user => 'administrator',
    auth_pwd => 'administrator',
    skip_xmpp => 0,
    skip_sip => 0,
    verbose => 0,
};

if ($config) {
    $opts->{host} = $config->{_}->{NGCP_API_IP};
    $opts->{port} = $config->{_}->{NGCP_API_PORT};
    $opts->{sslverify} = $config->{_}->{NGCP_API_SSLVERIFY} || 'yes';
}

GetOptions( $opts,
    "help|h",
    "reseller_id=i",
    "host=s",
    "port=i",
    "auth_user=s",
    "auth_pwd=s",
    "skip_sip",
    "skip_xmpp",
    "verbose",
    "man" => sub { pod2usage(-exitval => 0, -verbose => 2); },
) or pod2usage(2);

die pod2usage(-exitval => 1, -message => "No domain") unless ($#ARGV == 0);

sub main {
    my $domain = shift;
    my $urlbase = 'https://'.$opts->{host}.':'.$opts->{port};

    my $ua = LWP::UserAgent->new();
    if($opts->{sslverify} eq 'no') {
        $ua->ssl_opts(
            verify_hostname => 0,
            SSL_verify_mode => IO::Socket::SSL::SSL_VERIFY_NONE,
        );
    }
    $ua->credentials($opts->{host}.':'.$opts->{port}, 'api_admin_http',
        $opts->{auth_user}, $opts->{auth_pwd});
    # debug!!
    if($opts->{verbose}) {
        $ua->show_progress(1);
        $ua->add_handler("request_send",  sub { shift->dump; return });
        $ua->add_handler("response_done", sub { shift->dump; return });
    }
    my $domain_url = get_domain_url($ua, $urlbase, $domain);
    my $res = do_request($ua, $domain_url);
    if($res->is_success) {
        print $res->status_line . "\n";
    } else {
        die $res->as_string;
    }
    return;
}

sub get_domain_url {
    my $ua = shift;
    my $urlbase = shift;
    my $domain = shift;
    my $url = $urlbase."/api/domains/?domain=".$domain;
    my $req = HTTP::Request->new('GET', $url);
    my $domain_url;

    my $res = $ua->request($req);
    if($res->is_success) {
        my $collection = JSON::from_json($res->decoded_content);
        if ($collection->{total_count} == 1) {
            $domain_url = $urlbase .
                $collection->{_links}->{'ngcp:domains'}->{href};
        }
        else {
            pod2usage(-exitval => 3, -message => "Domain not found");
        }
    }
    else {
        die $res->as_string;
    }
    return $domain_url;
}

sub do_request {
    my $ua = shift;
    my $url = shift;

    my $full_url = URI->new($url);
    $full_url->query_form(
        $full_url->query_form,
        ($opts->{skip_xmpp} ? (_skip_xmpp_reload => 1) : ()),
        ($opts->{skip_sip} ? (_skip_sip_reload => 1) : ()),
    );
    my $req = HTTP::Request->new('DELETE', $full_url);
    return $ua->request($req);
}

main($ARGV[0]);

__END__
=head1 NAME

ngcp-delete_domain - delete a domain on NGCP

=head1 SYNOPSIS

ngcp-delete_domain [options] domain

=head1 OPTIONS

=over 8

=item B<-help>

Print a brief help message and exits.

=item B<-reseller_id>

The reseller id to assign this domain to. Defaults to 1.

=item B<-auth_user>

Authentication username . Defaults to 'administrator'.

=item B<-auth_pwd>

Authentication password . Defaults to 'administrator'.

=item B<-host>

Host where the send queries. Defaults to '127.0.0.1'.

=item B<-port>

Port where the send queries. Defaults to 1443.

=item B<-verbose>

See debug information. Default false.

=item B<-skip_sip>

Skip reloading SIP services. If true, changes will not be effective immedeately
until the respective service is restarted or properly notified. Default false.

=item B<-skip_xmpp>

Skip reloading XMPP services. If true, changes will not be effective immedeately
until the respective service is restarted or properly notified. Default false.

=back

=head1 DESCRIPTION

B<This program> will delete a domain at NGCP.

=head1 USAGE

ngcp-delete_domain -host 1.2.3.4 -reseller_id 4 test.example.org

=head1 REQUIRED ARGUMENTS

B<domain> to be deleted

=head1 EXIT STATUS

Exit code 0 means that everything should have went fine otherwise error.

=head1 DIAGNOSTICS

=head1 CONFIGURATION

/etc/default/ngcp-api for default values

=head1 DEPENDENCIES

ngcp-delete_domain relies on a bunch of Perl modules, all of them specified as
dependencies through the ngcp-ossbss-clients-perl Debian package.

=head1 INCOMPATIBILITIES

No known at this time.

=head1 BUGS AND LIMITATIONS

Please report problems you notice to the Sipwise
Development Team <support@sipwise.com>.

=head1 AUTHOR

Victor Seva <vseva@sipwise.com>

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2016 Sipwise GmbH, Austria

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
